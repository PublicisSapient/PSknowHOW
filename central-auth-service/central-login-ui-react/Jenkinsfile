properties([
    parameters([
       gitParameter (branchFilter: 'origin/(.*)', defaultValue: 'main', sortMode: 'DESCENDING_SMART', name: 'SBRANCH', type: 'PT_BRANCH_TAG',quickFilterEnabled:true ,description: 'Select Branch'),
      [$class: 'ChoiceParameter', 
            choiceType: 'PT_RADIO',
            description: 'Select BUILD to yes to compile code, build package, run Unit test, use Sonarqube for code quality and build docker image ',
            filterLength: 1,
            filterable: false,
            name: 'BUILD',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 'return ["ERROR Showing Deplyent type"]'
                ],
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
					  "return['yes:selected','no']"
                ]
            ]
        ],

        
        [$class: 'CascadeChoiceParameter', 
                                    choiceType: 'PT_RADIO', 
                                    description: 'Select PUSH_REGISTRY to yes to push docker image to registry',
                                    name: 'PUSH_REGISTRY', 
                                    referencedParameters: 'BUILD', 
                                    script: 
                                        [$class: 'GroovyScript',
                                        
                                        script: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script:'''
                                                if (BUILD.equals("yes")){ 
                                                  return['yes:selected','no']
                                                  }	 												
                                                '''                            
                                            ] 
                                    ]
                                ],
           [$class: 'ChoiceParameter', 
            choiceType: 'PT_RADIO',
            description: 'Select DEPLOY to Deploy to server ',
            filterLength: 1,
            filterable: false,
            name: 'DEPLOY',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 'return ["ERROR Showing Deplyent type"]'
                ],
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
					  "return['ONLY_AUTH_UI_CONTAINER','ALL_CONTAINERS']"
                ]
            ]
        ],
        
        [$class: 'CascadeChoiceParameter', 
                                    choiceType: 'PT_RADIO', 
                                    description: 'select Server to Deploy',
                                    name: 'SERVER', 
                                    referencedParameters: 'DEPLOY', 
                                    script: 
                                        [$class: 'GroovyScript',
                                        
                                        script: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script:'''
                                                if (DEPLOY.equals("ALL_CONTAINERS")){ 
                                                  return['172.26.20.198', '172.26.20.200']
                                                  }
                                                  else if (DEPLOY.equals("ONLY_AUTH_UI_CONTAINER"))	{
                                                    return['172.26.20.198', '172.26.20.200']
												                        }	 												
                                                '''
                                        
                                                
                                            ] 
                                    ]
                                ]

    ])
])
pipeline {
   agent any
   environment {
       select_docker_registry = "setup-speedy.tools.publicis.sapient.com"
       registryCredId = "REGISTRY_setup-speedy.tools.publicis.sapient.com"
       select_ACR_registry = "speedtools.azurecr.io"
       acr_registryCredId = "ACR_REGISTRY_CREDENTIALS"
       selected_server = "${env.SERVER}"
       }

   stages {
      stage('Selected Environment') {
         when {
             expression { env.DEPLOY }
         }
         steps {
              script {
                env.selected_environment = env.selected_server
                echo "Deploying ${env.selected_environment}."
                env.credId= "SSH_"+env.selected_environment
              }
         }
      }
      stage('Checkout') {
         steps {
               checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://pscode.lioncloud.net/psinnersource/monitor-measure-metrics/speedy-product/AuthNAuth.git',credentialsId: 'Auth-platform-credentials']], branches: [[name: '${SBRANCH}']]], poll: false
         }
      }
      stage('Capture Version') {
         steps {
                script {
                       def pom = readMavenPom file: 'pom.xml'
                       env.version = pom.version
                       echo "${pom.version}"
                       echo "${env.version}"
                       version = env.version
                }
         }
      }
      // stage('Build skipping Unit Test') {
      //    when{
      //       expression { env.BUILD == 'true' }
      //       expression { env.SKIP_UNIT_TEST == 'true' }
      //    }
      //    steps {
      //           sh """
		  //    	mvn clean install -DskipTests 
			// 	"""
      //    }
      // }
      stage('Building UI') {
 		 when{
            expression { env.BUILD == 'yes' }
         }
         steps {
                sh """
                  cd central-login-ui-react
                  npm cache clean --force
                  npm install
                  npm run build
                  find -name build
                  ls -ltr build
                  chmod -R 775 build
                  tar -czvf authui.tar build
	        	    """
	 	 }
      }
	stage('Sonar') {
        when{
            expression { env.BUILD == 'yes' }
        }
        steps {
                sh """
                cd central-login-ui-react
                echo 'sonar.branch.name=${SBRANCH}'>> sonar-project.properties
                echo 'sonar.host.url=$sonarurl'>> sonar-project.properties
                echo 'sonar.login=$sonarpass'>> sonar-project.properties
                sudo npm install -D sonarqube-scanner
                sudo npm run sonar
                """
        }
     }
     stage('Check Quality gates'){
        when{
            expression { env.BUILD == 'yes' }
        }
          steps{
           sh """
			        chmod +x SonarDelay.sh
              find -name report-task.txt
			  ./SonarDelay.sh ./central-login-ui-react/.scannerwork/report-task.txt
			        """
         }
       }


    stage('Build Image') {
        when{
            expression { env.BUILD == 'yes' }
        }
        steps {
                sh """
                cd central-login-ui-react
                docker build -t authnauth-ui:${env.version} .
                """
        }
     }
      stage('Push image') {
        when{
            expression { env.PUSH_REGISTRY == 'yes' }
         }
            steps {
                script {
                    sh "docker tag authnauth-ui:'${env.version}' '${env.select_docker_registry}'/auth/authnauth-ui:'${env.version}'"
                    docker.withRegistry( 'https://setup-speedy.tools.publicis.sapient.com', 'REGISTRY_setup-speedy.tools.publicis.sapient.com' ) {
                    sh "docker push '${env.select_docker_registry}'/auth/authnauth-ui:'${env.version}'"
                    sh "docker logout '${env.select_docker_registry}'"
                    }
                    sh "docker tag authnauth-ui:'${env.version}' '${env.select_ACR_registry}'/authnauth-ui:'${env.version}'"
                    docker.withRegistry( 'https://speedtools.azurecr.io', 'ACR_REGISTRY_CREDENTIALS' ) {
                    sh "docker push '${env.select_ACR_registry}'/authnauth-ui:'${env.version}'"
                    sh "docker logout '${env.select_ACR_registry}'"
                    }
                }
            }
        }
     
      stage('FULL Deploy') {
        when{
            expression { env.DEPLOY == 'ALL_CONTAINERS'}
        }
          steps {
                withCredentials([
                usernamePassword(credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'),
                usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')
                ]) {
                        sh """
			    > /tmp/authnauth-ui_hosts
                            echo "[server]" > /tmp/authnauth-ui_hosts
                            echo " ${env.selected_environment}" >> /tmp/authnauth-ui_hosts
                            cd DevOps/
                            ansible-playbook -i /tmp/authnauth-ui_hosts ansible_playbooks/deploy.yaml -e "version=${env.version}" -e "selected_registry=${env.select_docker_registry}" -e 'repository_name=${env.REGISTRY_REPOSITORY}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}' -e 'SERVICE=${env.SERVICE}'
                        """
                }
            }
      }

      stage('Deploying authNauth UI Service Only') {
        when{
            expression { env.DEPLOY == 'ONLY_AUTH_UI_CONTAINER'}
        }
          steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'],
                [$class: 'UsernamePasswordMultiBinding',credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME']])
                {
                        sh """
                            > /tmp/authnauth-ui_hosts
                            echo "[server]" > /tmp/authnauth-ui_hosts
                            echo " ${env.selected_environment}" >> /tmp/authnauth-ui_hosts
                            cd DevOps/
                            ansible-playbook -i /tmp/authnauth-ui_hosts ansible_playbooks/deploy.yaml -e 'CONTAINER_SERVICE=authnauth-ui' -e 'CONTAINER_NAME=authnauth-ui' -e "version=${env.version}" -e "selected_registry=${env.select_docker_registry}" -e 'repository_name=${env.REGISTRY_REPOSITORY}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}' -e 'SERVICE=${env.SERVICE}' -e 'REACT_APP_DNS=${env.selected_server}:443'
                        """
                }
            }
      }

   }
//    post {
//         always {
//             cleanWs()
//         }
//     }
}

