properties([
    parameters([
       gitParameter (branchFilter: 'origin/(.*)', defaultValue: 'main', sortMode: 'DESCENDING_SMART', name: 'SBRANCH', type: 'PT_BRANCH_TAG',quickFilterEnabled:true ,description: 'Select Branch'),
      [$class: 'ChoiceParameter', 
            choiceType: 'PT_RADIO',
            description: 'Select BUILD to yes to compile code, build package, test coverage , use Sonarqube for code quality and build docker image ',
            filterLength: 1,
            filterable: false,
            name: 'BUILD',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 'return ["ERROR Showing Deplyent type"]'
                ],
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
					  "return['yes:selected','no']"
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
                                    choiceType: 'PT_RADIO', 
                                    description: 'Select PUSH_REGISTRY to yes to push docker image to registry',
                                    name: 'PUSH_REGISTRY', 
                                    referencedParameters: 'BUILD', 
                                    script: 
                                        [$class: 'GroovyScript',
                                        
                                        script: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script:'''
                                                if (BUILD.equals("yes")){ 
                                                  return['yes:selected','no']
                                                  }	 												
                                                '''                            
                                            ] 
                                    ]
                                ],
           [$class: 'ChoiceParameter', 
            choiceType: 'PT_RADIO',
            description: 'Select DEPLOY to Deploy to server ',
            filterLength: 1,
            filterable: false,
            name: 'DEPLOY',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 'return ["ERROR Showing Deplyent type"]'
                ],
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
					  "return['yes','no:selected']"
                ]
            ]
        ],
        
        [$class: 'CascadeChoiceParameter', 
                                    choiceType: 'PT_RADIO', 
                                    description: 'select Server to Deploy',
                                    name: 'SERVER', 
                                    referencedParameters: 'DEPLOY', 
                                    script: 
                                        [$class: 'GroovyScript',
                                        
                                        script: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script:'''
                                                if (DEPLOY.equals("yes")){ 
                                                  return['172.26.20.198', '172.26.20.200']
                                                  }	 												
                                                '''
                                        
                                                
                                            ] 
                                    ]
                                ]

    ])
])
pipeline {
   agent any
   environment {
       select_docker_registry = "setup-speedy.tools.publicis.sapient.com"
       registryCredId="REGISTRY_setup-speedy.tools.publicis.sapient.com"
       select_ACR_registry = "speedtools.azurecr.io"
       acr_registryCredId = "ACR_REGISTRY_CREDENTIALS"
       selected_server = "${env.SERVER}"
       }

   stages {
      stage('Checkout') {
        steps {
               checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: 'https://pscode.lioncloud.net/psinnersource/monitor-measure-metrics/speedy-product/AuthNAuth.git',credentialsId: 'Auth-platform-credentials']], branches: [[name: '${SBRANCH}']]], poll: false
        }
      }
      stage('Selected Environment') {
         when {
             expression { env.DEPLOY }
         }
         steps {
              script {
                env.selected_environment = env.selected_server
                echo "Deploying ${env.selected_environment}."
                env.credId= "SSH_"+env.selected_environment
              }
         }
      }

      stage('Capture Version') {
             steps {
                  script {
                               def pom = readMavenPom file: 'pom.xml'
                               env.version = pom.version
                               echo "${pom.version}"
                               echo "${env.version}"
                  }
             }
        }
      
      stage('Build Image') {
             when{
            expression { env.BUILD == 'yes' }
         }
             steps {
                sh """
                    cd database
                    docker build -t authdb:${env.version} .
                    cd ..
                """
            }
        }
        stage('Push image') {
        when{
            expression { env.PUSH_REGISTRY == 'yes' }
         }
            steps {
                script {
                    sh "docker tag authdb:'${env.version}' '${env.select_docker_registry}'/auth/authdb:'${env.version}'"
                    docker.withRegistry( 'https://setup-speedy.tools.publicis.sapient.com', 'REGISTRY_setup-speedy.tools.publicis.sapient.com' ) {
                    sh "docker push '${env.select_docker_registry}'/auth/authdb:'${env.version}'"
                    sh "docker logout '${env.select_docker_registry}'"
                    }
                    sh "docker tag authdb:'${env.version}' '${env.select_ACR_registry}'/authdb:'${env.version}'"
                    docker.withRegistry( 'https://speedtools.azurecr.io', 'ACR_REGISTRY_CREDENTIALS' ) {
                    sh "docker push '${env.select_ACR_registry}'/authdb:'${env.version}'"
                    sh "docker logout '${env.select_ACR_registry}'"
                    }
                }
            }
        }    
      stage('Deploy') {
        when{
            expression { env.DEPLOY == 'yes'}
        }
          steps {
                withCredentials([
                usernamePassword(credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'),
                usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')
                ]) {
                        sh """
                            > /tmp/authnauth_hosts
                            echo "[server]" > /tmp/authnauth_hosts
                            echo " ${env.selected_environment}" >> /tmp/authnauth_hosts
                            cd DevOps/
                            ansible-playbook -i /tmp/authnauth_hosts ansible_playbooks/deploy.yaml -e "version=${env.version}" -e "selected_registry=${env.select_docker_registry}" -e 'repository_name=${env.REGISTRY_REPOSITORY}' -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}' -e 'SERVICE=${env.SERVICE}'
                        """
                }
            }
      }


   }
   post {
        always {
            cleanWs()
        }
    }
}
