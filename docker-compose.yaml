version: "2"
services:
#remove MongoDB container, if you are using managed database
  MongoDB:
    image: psknowhow/mongo-base:5.0.18
    tty: true
    container_name: mongodb
    ports:
      - 27017:27017
    restart: on-failure
    volumes:
      - mongodbvol:/data/db
      - mongodbvol:/data/logs
    environment:
                             #add env variable as mentioned @ https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables
    networks:
      - Network_apps
#This is a mandatrory container
  CustomAPI:
    image: psknowhow/customapi:latest
    depends_on: #remove this tag, if you are using managed database
      - MongoDB
    restart: on-failure
    tty: true
    container_name: customapi
    mem_limit: 4096m
    mem_reservation: 1024m
    ports:
      - 8080:8080
    volumes:
      - customapivol:/app/logs
      - customapivol:/app/properties/
      - customapivol:/app/offline_data/
      - customapivol:/app/certs/
      - /etc/hosts:/etc/hosts
    environment:
    #add env variable as mentioned @ https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables
    links: #remove this tag, if you are using managed database
      - MongoDB:mongodb
    networks:
      - Network_apps
#Mandatory container
  UI:
    image: psknowhow/ui:latest
    depends_on:
      - CustomAPI
    restart: on-failure
    tty: true
    container_name: ui
    mem_limit: 1024m
    mem_reservation: 256m
    ports:
      - 80:80  # If you are installing Auth service make this port 82:80
      - 443:443  # If you are installing Auth service make this port 445:443
    volumes:
      - uivol:/var/log/nginx
      #- /app/apps/certs/:/etc/ssl/certs/ # If you have your SSL certificate uncomment it and copy to /app/apps/certs directory 
    links:
      - CustomAPI:customapi
    environment:
      #add env variable as mentioned @ https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables
    networks:
      - Network_apps
#remove this container, if deployment is not going to use Jira as PM tools datasource
  jira-processor:
    image: psknowhow/jira-processor:latest
    depends_on: #remove this tag, if you are using managed database
      - MongoDB
    restart: on-failure
    tty: true
    container_name: jira-processor
    mem_limit: 4096m
    mem_reservation: 1024m
    volumes:
      - jira-processorvol:/app/logs
      - jira-processorvol:/app/properties/
      - jira-processorvol:/app/offline_data
      - /etc/hosts:/etc/hosts
    environment:
      #add env variable as mentioned @ https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables
    links:
      - MongoDB:mongodb #remove this tag, if you are using managed database
    networks:
      - Network_apps
#Remove this container, if build or repo or Sonar is not going to be used as data source
#for details, refer the documents
  devops-processor:
    image: psknowhow/devops-processor:latest
    depends_on: #remove this tag, if you are using managed database
      - MongoDB
    restart: on-failure
    tty: true
    container_name: devops-processor
    mem_limit: 8192m
    mem_reservation: 2048m
    volumes:
      - devops-processorvol:/app/logs
      - devops-processorvol:/app/properties/
      - devops-processorvol:/app/offline_data
      - devops-processorvol:/app/certs/
      - /etc/hosts:/etc/hosts
    environment:
      #add env variable as mentioned @ https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables
    links: #remove this tag, if you are using managed database
      - MongoDB:mongodb
    networks:
      - Network_apps
#remove this container, if Azure boards is not going to be used as data source
  azure-board-processor:
    image: psknowhow/azure-board-processor:latest
    restart: on-failure
    depends_on: #remove this tag, if you are using managed database
      - MongoDB
    tty: true
    container_name: azure-board-processor
    mem_limit: 1024m
    mem_reservation: 512m
    volumes:
      - azure-board-processorvol:/app/logs
      - azure-board-processorvol:/app/properties/
      - azure-board-processorvol:/app/offline_data
      - /etc/hosts:/etc/hosts
    environment:
     #add env variable as mentioned @ https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables
    links:
      - MongoDB:mongodb #remove this tag, if you are using managed database
    networks:
      - Network_apps
#remove this container, if Azure boards is not going to be used as data source
  azure-pipeline-repo:
    image: psknowhow/azure-pipeline-repo:latest
    restart: on-failure
    depends_on: #remove this tag, if you are using managed database
      - MongoDB
    tty: true
    container_name: azure-pipeline-repo
    mem_limit: 2048m
    mem_reservation: 1024m
    volumes:
      - azure-pipeline-repovol:/app/logs
      - azure-pipeline-repovol:/app/properties/
      - azure-pipeline-repovol:/app/offline_data
      - azure-pipeline-repovol:/app/certs/
      - /etc/hosts:/etc/hosts
    environment:
     #add env variable as mentioned @ https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables
    links:
      - MongoDB:mongodb #remove this tag, if you are using managed database
    networks:
      - Network_apps
#using Kafka is optional, remove kafka-consumers, kafka container and zookeeper, if kafka is is not going to be used for notifications
  kafka-consumers:
    image: psknowhow/kafka-consumers:latest
    restart: on-failure
    depends_on:
      - MongoDB
    tty: true
    container_name: kafka-consumers
    volumes:
      - kafka-consumersvol:/app/properties/
    mem_limit: 2048m
    mem_reservation: 1024m
    ports:
      - 50020:50020
    links:
      - MongoDB:mongodb
    networks:
      - Network_apps
  kafka:
    image: bitnami/kafka:3.2.1
    restart: on-failure
    depends_on:
      - zookeeper
    tty: true
    container_name: kafka
    mem_limit: 2048m
    mem_reservation: 1024m
    environment:
        #add env variable as mentioned @ https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables
    ports:
      - 9092:9092
    links:
      - MongoDB:mongodb
    networks:
      - Network_apps

  zookeeper:
    image: zookeeper:3.8.0
    container_name: zookeeper
    mem_limit: 2048m
    mem_reservation: 1024m
    restart: always
    ports:
      - "2181:2181"
    networks:
      - Network_apps


########     The following services scm-processor-postgres, scm-processor-rabbitmq, scm-processor-api & scm-processor-core is a Source code manager processor . Uncomment the services and volumes below if you want to integrate with the Knowhow application to fetch Data from SCM tools.


  # scm-processor-postgres:
  #   container_name: scm-processor-postgres
  #   image: postgres:11.1
  #   environment:
  #     # add env variable as mentioned https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables#SCM-tool%3A
  #   volumes:
  #     - scm-processor-postgres-data:/var/lib/postgresql/data
  #   restart: always
  #   ports:
  #     - '8001:5432'
  #   networks:
  #     - Network_apps

  # scm-processor-rabbitmq:
  #   container_name: scm-processor-rabbitmq
  #   image: rabbitmq:3.8-management
  #   environment:
  #     # add env variable as mentioned https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables#SCM-tool%3A
  #   ports:
  #     - "8002:5672"
  #     - "8003:15672"
  #   cpus: 0.1
  #   networks:
  #     - Network_apps

  # scm-processor-api:
  #   container_name: scm-processor-api
  #   image: psknowhow/scm-processor-api:latest
  #   ports:
  #     - '8000:8000'
  #   environment:
  #     # add env variable as mentioned https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables#SCM-tool%3A
  #   depends_on:
  #     - scm-processor-postgres
  #     - scm-processor-rabbitmq
  #   restart: always
  #   networks:
  #     - Network_apps

  # scm-processor-core:
  #   container_name: scm-processor-core
  #   image: psknowhow/scm-processor-core:latest
  #   restart: always
  #   environment:
  #     # add env variable as mentioned https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables#SCM-tool%3A
  #   volumes:
  #     - scm-processor-scanner-storage:/scm-processor-storage
  #   depends_on:
  #     - scm-processor-postgres
  #     - scm-processor-rabbitmq
  #   networks:
  #     - Network_apps



####   The following services are for authentication and authorization applications using SAML. Uncomment the services below if you want to integrate with the Knowhow application. And the volumes

  # authdb:
  #   image: psknowhow/postgres-auth-scm:<TAG VERSION>
  #   tty: true
  #   container_name: authdb
  #   restart: always
  #   cpus: 0.2
  #   mem_limit: 2048m
  #   mem_reservation: 1024m
  #   volumes:
  #     - authdata:/var/lib/postgresql/data
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #    # add environment variables as mentioned here https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables#AuthnAuth-Specific-Variables%3A-Use-Only-When-Deploying-Knowhow-with-Auth-Application
  #   networks:
  #     - Network_apps


  ###   If you are not running postgres as scp processor you can uncomment the above "authdb" docker service.  
  
  # authnauth:
  #   image: psknowhow/authnauth:<TAG VERSION>
  #   depends_on:
  #     - authdb
  #   restart: always
  #   tty: true
  #   cpus: 0.2
  #   container_name: authnauth
  #   mem_limit: 2048m
  #   mem_reservation: 1024m
  #   environment:
  #     # add environment variables as mentioned here https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables#AuthnAuth-Specific-Variables%3A-Use-Only-When-Deploying-Knowhow-with-Auth-Application
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   links:
  #     - authdb:authdb
  #   networks:
  #     - Network_apps

  # authnauth-ui:
  #   image: psknowhow/authnauth-ui:<TAG VERSION>
  #   depends_on:
  #     - authdb
  #     - authnauth
  #   restart: always
  #   tty: true
  #   cpus: 0.2
  #   container_name: authnauth-ui
  #   mem_limit: 512m
  #   mem_reservation: 256m
  #   ports:
  #     - 443:443
  #   environment:
  #     # add environment variables as mentioned here https://psknowhow.atlassian.net/wiki/spaces/PSKNOWHOW/pages/45711363/Docker+Environmental+variables#AuthnAuth-Specific-Variables%3A-Use-Only-When-Deploying-Knowhow-with-Auth-Application
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #    #- /app/apps/certs/:/etc/ssl/certs/ # If you have your SSL certificate uncomment it and copy to /app/apps/certs directory 
  #   links:
  #     - authdb:authdb
  #   networks:
  #     - Network_apps

      
volumes:
  kafka-consumersrvol:
  azure-board-processorvol:
  azure-pipeline-repovol:
  devops-processorvol:
  jira-processorvol:
  uivol:
  customapivol:
  mongodbvol:
  # scm-processor-scanner-storage:  # uncomment if you are using scm-processor
  # scm-processor-postgres-data:    # uncomment if you are using scm-processor
  # authdata:                       # uncomment if you are using authNauth application

networks:
  Network_apps: