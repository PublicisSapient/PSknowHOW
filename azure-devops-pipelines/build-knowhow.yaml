trigger:
- azure-devops

parameters:
- name: BUILD
  type: string
  default: 'API'
  values:
  - 'API'
  - 'UI'
  - 'Jira_Processor'
  - 'DevOps_Processor'
  - 'Azure_Board_Processor'
  - 'Azure_Pipeline_Repo'
  - 'ALL'
- name: PUSH_TO_DOCKER_REGISTRY
  type: string
  default: 'YES'
  values:
  - 'YES'
  - 'NO'

stages:
- stage: API_BUILD
  condition: or(eq('${{ parameters.BUILD }}', 'API'), eq('${{ parameters.BUILD }}', 'ALL'))

  jobs:
  - job: Capturing_Version
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      overrideValues: ''

    steps:
    - checkout: self
    # - task: UseJavaVersion@1
    #   inputs:
    #     versionSpec: '17'

    - script: |
        echo "BUILDING: ${{ parameters.BUILD }}"
        echo "Capturing Version"
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        java -version
        # echo "##vso[task.setvariable variable=overrideValues]image.tag=$VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"
  
  - job: RUNNING_TEST
    displayName: 'Running Tests'
    dependsOn: Capturing_Version
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    # - checkout: none

    - task: Maven@3
      displayName: 'Run Maven build'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install -Pcustomapi'
        publishJUnitResults: true
    - publish: $(System.DefaultWorkingDirectory)/customapi/target
      artifact: dependencies

  - job: Preparing_Sonar_qube_analysis_report  
    displayName: 'Preparing SonarQube Analysis'
    dependsOn: RUNNING_TEST
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - download: current
      artifact: dependencies
    - task: Maven@3
      displayName: 'Sonar Maven build'
      inputs:
        mavenPomFile: 'customapi/pom.xml'
        goals: 'sonar:sonar'
        publishJUnitResults: true
    # - checkout: none
    # - task: SonarQubePrepare@4
    #   displayName: 'Prepare Analysis Configuration'
    #   inputs:
    #     SonarQube: 'sonar-qube-sc' # Name of the SonarQube service connection
    #     scannerMode: 'CLI'
    #     configMode: 'manual'
    #     cliProjectKey: 'ENGINEERING.KPIDASHBOARD.CUSTOMAPI' # SonarQube project key
    #     cliProjectName: 'ENGINEERING.KPIDASHBOARD.CUSTOMAPI' # Optional, SonarQube project name
    #     cliSources: 'customapi' # Path to your source code. Adjust if your pom.xml is located in a different directory
    #     cliProjectVersion: '$(overrideValues)' # Optional, version of your project
    #     cliExtraProperties: |
    #       sonar.branch.name=$(Build.SourceBranchName) # Optional, additional properties
    #     cliTimeoutSec: '600' # Optional, maximum duration of the analysis in seconds

      # enabled: true
        
  


- stage: UI_Deploy
  condition: or(eq('${{ parameters.BUILD }}', 'UI'), eq('${{ parameters.BUILD }}', 'ALL'))

  jobs:
  - job: UI_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        echo "Selected Deployment Options: ${{ parameters.BUILD }}"
        echo "Deploying UI..."
        # Add UI deployment steps
        echo "Deploying Helm charts for UI..."
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"


- stage: Jira_Processor_Deploy
  condition: or(eq('${{ parameters.BUILD }}', 'Jira_Processor'), eq('${{ parameters.BUILD }}', 'ALL'))

  jobs:
  - job: Jira_Processor_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        cd processors/jira
        echo "Selected Deployment Options: ${{ parameters.BUILD }}"
        echo "Deploying Jira_Processor..."
        # Add Jira_Processor deployment steps
        echo "Deploying Helm charts for Jira_Processor..."
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"

- stage: DevOps_Processor_Deploy
  condition: or(eq('${{ parameters.BUILD }}', 'DevOps_Processor'), eq('${{ parameters.BUILD }}', 'ALL'))

  jobs:
  - job: DevOps_Processor_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        echo "Selected Deployment Options: ${{ parameters.BUILD }}"
        echo "Deploying DevOps_Processor..."
        # Add DevOps_Processor deployment steps
        echo "Deploying Helm charts for DevOps_Processor..."
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"

- stage: Azure_Board_Processor_Deploy
  condition: or(eq('${{ parameters.BUILD }}', 'Azure_Board_Processor'), eq('${{ parameters.BUILD }}', 'ALL'))

  jobs:
  - job: Azure_Board_Processor_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        echo "Selected Deployment Options: ${{ parameters.BUILD }}"
        echo "Deploying Azure_Board_Processor..."
        # Add Azure_Board_Processor deployment steps
        echo "Deploying Helm charts for Azure_Board_Process"
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        # echo "##vso[task.setvariable variable=overrideValues]image.tag=$VERSION"
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"


- stage: Azure_Pipeline_Repo_Deploy
  condition: or(eq('${{ parameters.BUILD }}', 'Azure_Pipeline_Repo'), eq('${{ parameters.BUILD }}', 'ALL'))

  jobs:
  - job: Azure_Pipeline_Repo_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        echo "Selected Deployment Options: ${{ parameters.BUILD }}"
        echo "Deploying Azure_Pipeline_Repo..."
        # Add Azure_Pipeline_Repo deployment steps
        echo "Deploying Helm charts for Azure_Pipeline_Repo..."
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"


