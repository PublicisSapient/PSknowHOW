trigger:
- azure-devops

parameters:
- name: BUILD
  type: string
  default: 'API'
  values:
  - 'API'
  - 'UI'
  - 'Jira_Processor'
  - 'DevOps_Processor'
  - 'Azure_Board_Processor'
  - 'Azure_Pipeline_Repo'
  - 'ALL'
- name: PUSH_TO_DOCKER_REGISTRY
  type: string
  default: 'uat'
  values:
  - 'YES'
  - 'NO'

stages:
- stage: API_BUILD
  condition: or(eq('${{ parameters.deploymentOptions }}', 'API'), eq('${{ parameters.deploymentOptions }}', 'ALL'))

  jobs:
  - job: Capturing Version
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      overrideValues: ''

    steps:
    - checkout: self

    - script: |
        echo "BUILDING: ${{ parameters.BUILD }}"
        echo "Capturing Version"
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        # echo "##vso[task.setvariable variable=overrideValues]image.tag=$VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"
  
  - job: RUNNING TEST 
    pool:
      vmImage: 'ubuntu-latest'

    steps:

    - task: Maven@3
      displayName: 'Run Maven build'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install -Pcustomapi'
        publishJUnitResults: true

  - job: Preparing Sonar qube analysis report  
    pool:
      vmImage: 'ubuntu-latest'
    
    step:

    - task: SonarQubePrepare@4
      displayName: Prepare Analysis Configuration task
      inputs:
        SonarQube: 'sonar-qube-sc'
        scannerMode: 'Other'
        projectKey: 'ENGINEERING.KPIDASHBOARD.CUSTOMAPI'
        projectName: 'ENGINEERING.KPIDASHBOARD.CUSTOMAPI'
        extraProperties: |
          sonar.projectVersion=$(overrideValues)
          sonar.branch.name=$(Build.SourceBranchName)
      # enabled: true
        
  


- stage: UI_Deploy
  condition: or(eq('${{ parameters.deploymentOptions }}', 'UI'), eq('${{ parameters.deploymentOptions }}', 'ALL'))

  jobs:
  - job: UI_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        echo "Selected Deployment Options: ${{ parameters.deploymentOptions }}"
        echo "${{ parameters.Environment }}"
        echo "Deploying UI..."
        # Add UI deployment steps
        echo "Deploying Helm charts for UI..."
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"


- stage: Jira_Processor_Deploy
  condition: or(eq('${{ parameters.deploymentOptions }}', 'Jira_Processor'), eq('${{ parameters.deploymentOptions }}', 'ALL'))

  jobs:
  - job: Jira_Processor_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        cd processors/jira
        echo "Selected Deployment Options: ${{ parameters.deploymentOptions }}"
        echo "${{ parameters.Environment }}"
        echo "Deploying Jira_Processor..."
        # Add Jira_Processor deployment steps
        echo "Deploying Helm charts for Jira_Processor..."
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: '${{ parameters.Environment }}-knowhow-k8s-sc'
        namespace: '${{ parameters.Environment }}-knowhow'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: './Kubernetes/knowhow-helm/knowhow-jira-processor'
        releaseName: 'jira-processor'
        overrideValues: 'image.tag=$(overrideValues)'
        valueFile: './Kubernetes/knowhow-helm/knowhow-jira-processor/values.yaml'
      displayName: 'Deploy Helm Charts for jira-processor'

- stage: DevOps_Processor_Deploy
  condition: or(eq('${{ parameters.deploymentOptions }}', 'DevOps_Processor'), eq('${{ parameters.deploymentOptions }}', 'ALL'))

  jobs:
  - job: DevOps_Processor_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        echo "Selected Deployment Options: ${{ parameters.deploymentOptions }}"
        echo "${{ parameters.Environment }}"
        echo "Deploying DevOps_Processor..."
        # Add DevOps_Processor deployment steps
        echo "Deploying Helm charts for DevOps_Processor..."
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: '${{ parameters.Environment }}-knowhow-k8s-sc'
        namespace: '${{ parameters.Environment }}-knowhow'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: './Kubernetes/knowhow-helm/devops-processor'
        releaseName: 'devops-processor'
        overrideValues: 'image.tag=$(overrideValues)'
        valueFile: './Kubernetes/knowhow-helm/devops-processor/values.yaml'
      displayName: 'Deploy DevOps_Processor'

- stage: Azure_Board_Processor_Deploy
  condition: or(eq('${{ parameters.deploymentOptions }}', 'Azure_Board_Processor'), eq('${{ parameters.deploymentOptions }}', 'ALL'))

  jobs:
  - job: Azure_Board_Processor_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        echo "Selected Deployment Options: ${{ parameters.deploymentOptions }}"
        echo "${{ parameters.Environment }}"
        echo "Deploying Azure_Board_Processor..."
        # Add Azure_Board_Processor deployment steps
        echo "Deploying Helm charts for Azure_Board_Process"
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        # echo "##vso[task.setvariable variable=overrideValues]image.tag=$VERSION"
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: '${{ parameters.Environment }}-knowhow-k8s-sc'
        namespace: '${{ parameters.Environment }}-knowhow'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: './Kubernetes/knowhow-helm/knowhow-azure-board-processor'
        releaseName: 'azure-board-processor'
        overrideValues: 'image.tag=$(overrideValues)'
        valueFile: './Kubernetes/knowhow-helm/knowhow-azure-board-processor/values.yaml'
      displayName: 'Deploy knowhow-azure-board-processor'


- stage: Azure_Pipeline_Repo_Deploy
  condition: or(eq('${{ parameters.deploymentOptions }}', 'Azure_Pipeline_Repo'), eq('${{ parameters.deploymentOptions }}', 'ALL'))

  jobs:
  - job: Azure_Pipeline_Repo_Deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - script: |
        echo "Selected Deployment Options: ${{ parameters.deploymentOptions }}"
        echo "${{ parameters.Environment }}"
        echo "Deploying Azure_Pipeline_Repo..."
        # Add Azure_Pipeline_Repo deployment steps
        echo "Deploying Helm charts for Azure_Pipeline_Repo..."
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Version from pom.xml: $VERSION"
        echo "##vso[task.setvariable variable=overrideValues]$VERSION"

    - task: HelmDeploy@0
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceConnection: '${{ parameters.Environment }}-knowhow-k8s-sc'
        namespace: '${{ parameters.Environment }}-knowhow'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: './Kubernetes/knowhow-helm/knowhow-azure-pipeline-repo'
        releaseName: 'azure-pipeline-repo'
        overrideValues: 'image.tag=$(overrideValues)'
        valueFile: './Kubernetes/knowhow-helm/knowhow-azure-pipeline-repo/values.yaml'
      displayName: 'Deploy azure-repo'

